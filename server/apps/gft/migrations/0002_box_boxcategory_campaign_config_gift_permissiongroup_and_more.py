# Generated by Django 4.2.9 on 2024-06-09 17:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import shortuuid.django_fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('gft', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Box',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='primary key id')),
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet=None, editable=False, length=10, max_length=40, prefix='', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('title', models.CharField(help_text='Title for the gift box package', max_length=150, verbose_name='Title')),
                ('receiver_name', models.CharField(blank=True, help_text='Name of the receiver', max_length=150, null=True, verbose_name='Receiver Name')),
                ('receiver_email', models.CharField(blank=True, help_text='Email of the receiver', max_length=150, null=True, verbose_name='Receiver Email')),
                ('days_of_gifting', models.IntegerField(default=0, verbose_name='Days of Gifting')),
                ('open_date', models.DateField(default=django.utils.timezone.now, verbose_name='Open Date')),
                ('last_opened', models.DateField(blank=True, null=True, verbose_name='Last Opened')),
                ('is_setup', models.BooleanField(default=False, verbose_name='Is Setup')),
                ('is_company_setup', models.BooleanField(default=False, verbose_name='Is Company Setup')),
                ('qr_code_v', models.ImageField(blank=True, null=True, upload_to='gift_qr_codes/', verbose_name='QR Code')),
                ('open_after_a_day', models.BooleanField(default=False, help_text='Decide if to allow users only open the mini boxes once a day', verbose_name='Open After a Day')),
            ],
            options={
                'verbose_name': 'Box',
                'verbose_name_plural': 'Boxes',
            },
        ),
        migrations.CreateModel(
            name='BoxCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('label', models.CharField(blank=True, editable=False, max_length=255, null=True, verbose_name='Label')),
                ('category', models.CharField(blank=True, choices=[('3', '3 days'), ('7', '7 days'), ('14', '14 days'), ('30', '30 days')], default='3', max_length=255, null=True, verbose_name='Category')),
                ('qty', models.IntegerField(default=0, verbose_name='Quantity')),
            ],
            options={
                'verbose_name': 'Box Category',
                'verbose_name_plural': 'Box Categories',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='primary key id')),
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet=None, editable=False, length=10, max_length=40, prefix='', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('duration', models.IntegerField(verbose_name='Duration')),
                ('num_boxes', models.IntegerField(verbose_name='Number of Boxes')),
                ('header_image', models.ImageField(blank=True, null=True, upload_to='campaigns/headers', verbose_name='Header Image')),
                ('open_after_a_day', models.BooleanField(default=True, verbose_name='Open After a Day')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
            managers=[
                ('current_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_host', models.CharField(default='smtp.gmail.com', max_length=255, verbose_name='Email Host')),
                ('email_port', models.IntegerField(default=587, verbose_name='Email Port')),
                ('email_host_user', models.CharField(default='apikey', max_length=255, verbose_name='Email Host User')),
                ('email_host_password', models.CharField(default='password', max_length=255, verbose_name='Email Host Password')),
                ('company_api_key', models.CharField(max_length=255, verbose_name='Company API Key')),
                ('super_admin_username', models.CharField(max_length=255, verbose_name='Super Admin Username')),
                ('api_url', models.CharField(max_length=255, verbose_name='API URL')),
                ('sendgrid_api_key', models.CharField(blank=True, max_length=255, null=True, verbose_name='SendGrid API Key')),
                ('twilio_account_sid', models.CharField(blank=True, max_length=255, null=True, verbose_name='Twilio Account SID')),
                ('twilio_auth_token', models.CharField(blank=True, max_length=255, null=True, verbose_name='Twilio Auth Token')),
                ('twilio_sid', models.CharField(blank=True, max_length=255, null=True, verbose_name='Twilio SID')),
                ('twilio_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Twilio Number')),
                ('postgres_db_name', models.CharField(default='postgres', max_length=255, verbose_name='Postgres DB Name')),
                ('postgres_db_user', models.CharField(default='postgres', max_length=255, verbose_name='Postgres DB User')),
                ('postgres_db_password', models.CharField(default='postgres', max_length=255, verbose_name='Postgres DB Password')),
                ('postgres_db_host', models.CharField(default='localhost', max_length=255, verbose_name='Postgres DB Host')),
                ('postgres_db_port', models.IntegerField(default=5432, verbose_name='Postgres DB Port')),
                ('environment', models.CharField(choices=[('PRODUCTION', 'PRODUCTION'), ('DEVELOPMENT', 'DEVELOPMENT'), ('STAGING', 'STAGING')], default=('DEVELOPMENT', 'DEVELOPMENT'), max_length=65, verbose_name='Environment')),
                ('jwt_secret_key', models.CharField(default='secret', max_length=1024, verbose_name='JWT Secret Key')),
                ('token_min_length', models.IntegerField(default=6, help_text='Minimum length of the token', verbose_name='Token Min Length')),
                ('token_max_length', models.IntegerField(default=6, help_text='Maximum length of the token', verbose_name='Token Max Length')),
                ('login_with_email', models.BooleanField(default=False, help_text='Allow users to login with email', verbose_name='Login with Email')),
                ('login_with_phone', models.BooleanField(default=True, help_text='Allow users to login with phone', verbose_name='Login with Phone')),
                ('under_maintenance', models.BooleanField(default=False, help_text='Enable maintenance mode', verbose_name='Under Maintenance')),
                ('maintenance_template', models.CharField(default='maintenance.html', help_text='Template to be used for maintenance mode', max_length=255, verbose_name='Maintenance Template')),
                ('time_to_remind_users', models.TimeField(default='23:00:00', help_text='Time to remind users to open their gifts', verbose_name='Time to Remind Users')),
            ],
            options={
                'verbose_name': 'Configuration',
                'verbose_name_plural': 'Configurations',
            },
        ),
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='primary key id')),
                ('id', shortuuid.django_fields.ShortUUIDField(alphabet=None, editable=False, length=10, max_length=40, prefix='', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated')),
                ('gift_title', models.CharField(max_length=255, verbose_name='Gift Title')),
                ('gift_description', models.TextField(verbose_name='Gift Description')),
                ('gift_content_type', models.CharField(default='text', max_length=255, verbose_name='Gift Content Type')),
                ('reaction', models.CharField(blank=True, max_length=255, null=True, verbose_name='Reaction')),
                ('opened', models.BooleanField(default=False, verbose_name='Opened')),
                ('open_date', models.DateField(verbose_name='Open Date')),
                ('qr_code_v', models.ImageField(blank=True, null=True, upload_to='gift_qr_codes/', verbose_name='QR Code')),
                ('box_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gift_box', to='gft.box', verbose_name='Gift Box')),
                ('gift_campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gft.campaign', verbose_name='Gift Campaign')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gift_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Gift',
                'verbose_name_plural': 'Gifts',
            },
        ),
        migrations.CreateModel(
            name='PermissionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('label', models.CharField(blank=True, max_length=255, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Permission Group',
                'verbose_name_plural': 'Permission Groups',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('notification_type', models.CharField(choices=[('notify_user_OTP', 'Notify User OTP'), ('verify_OTP', 'Verify OTP'), ('notify_sender_open_gift', 'Notify Sender Open Gift'), ('notify_receiver_to_open_gift', 'Notify Receiver to Open Gift'), ('notify_user_account_activity', 'Notify User Account Activity'), ('server_error', 'Server Error'), ('unauthorized', 'Unauthorized'), ('message', 'Message')], default=('notify_user_OTP', 'Notify User OTP'), max_length=255, verbose_name='Notification Type')),
                ('subject', models.CharField(blank=True, max_length=255, null=True, verbose_name='Subject')),
                ('email_body', models.TextField(blank=True, null=True, verbose_name='Email Body')),
                ('sms_body', models.TextField(blank=True, null=True, verbose_name='SMS Body')),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Template',
                'verbose_name_plural': 'Templates',
            },
        ),
        migrations.RemoveField(
            model_name='company',
            name='user',
        ),
        migrations.AddField(
            model_name='company',
            name='owner',
            field=models.OneToOneField(blank=True, help_text='Owner of the company', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='PermissionsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, verbose_name='Label')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('groups', models.ManyToManyField(related_name='permissions', to='gft.permissiongroup', verbose_name='Groups')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255, verbose_name='Message of the Notification')),
                ('read', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.box', verbose_name='Box That the Notification Is About')),
                ('gift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.gift', verbose_name='Gift That the Notification Is About')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User Who Receives the Notification')),
            ],
            options={
                'verbose_name_plural': 'Notifications',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GiftVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_of_visit', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of Visit')),
                ('metadata', models.JSONField(blank=True, default=dict, null=True)),
                ('gift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.gift', verbose_name='Gift')),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Visitor')),
            ],
            options={
                'verbose_name': 'Gift Visit',
                'verbose_name_plural': 'Gift Visits',
            },
        ),
        migrations.CreateModel(
            name='CompanyBoxes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.IntegerField(default=0, verbose_name='Quantity')),
                ('box_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.boxcategory', verbose_name='Box Type')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Company Box',
                'verbose_name_plural': 'Company Boxes',
            },
        ),
        migrations.CreateModel(
            name='CompanyApiKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Key')),
                ('num_of_requests_made', models.PositiveBigIntegerField(default=0, verbose_name='Number of Requests Made')),
                ('max_requests', models.PositiveIntegerField(default=100, verbose_name='Maximum Requests')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('last_used', models.DateTimeField(auto_now=True, verbose_name='Last Used')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.company', verbose_name='Company')),
                ('groups', models.ManyToManyField(related_name='api_keys', to='gft.permissiongroup', verbose_name='Groups')),
            ],
            options={
                'verbose_name': 'Company API Key',
                'verbose_name_plural': 'Company API Keys',
            },
        ),
        migrations.AddField(
            model_name='campaign',
            name='company',
            field=models.ForeignKey(help_text='Company that owns this campaign', on_delete=django.db.models.deletion.CASCADE, to='gft.company', verbose_name='Company'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='company_boxes',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campaign_company_boxes', to='gft.companyboxes', verbose_name='Company Boxes'),
        ),
        migrations.AddField(
            model_name='box',
            name='box_campaign',
            field=models.ForeignKey(blank=True, help_text='Campaign that this gift box belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, to='gft.campaign', verbose_name='Box Campaign'),
        ),
        migrations.AddField(
            model_name='box',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='box_user', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='ApiLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_url', models.CharField(help_text='API URL', max_length=1024, verbose_name='API URL')),
                ('headers', models.JSONField(verbose_name='Headers')),
                ('body', models.JSONField(verbose_name='Body')),
                ('response', models.JSONField(verbose_name='Response')),
                ('method', models.CharField(db_index=True, max_length=10, verbose_name='Method')),
                ('client_ip_address', models.CharField(max_length=50, verbose_name='Client IP Address')),
                ('status_code', models.PositiveSmallIntegerField(db_index=True, help_text='Response status code', verbose_name='Status Code')),
                ('execution_time', models.DecimalField(decimal_places=5, help_text='Server execution time (Not complete response time.)', max_digits=8, verbose_name='Execution Time')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='Added On')),
                ('event', models.CharField(max_length=255, verbose_name='Event')),
                ('api_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gft.companyapikey', verbose_name='API Key')),
            ],
            options={
                'verbose_name': 'API Log',
                'verbose_name_plural': 'API Logs',
            },
        ),
    ]
