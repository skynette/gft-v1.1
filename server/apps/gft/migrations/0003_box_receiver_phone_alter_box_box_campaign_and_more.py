# Generated by Django 4.2.9 on 2024-06-14 08:19

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('gft', '0002_box_boxcategory_campaign_config_gift_permissiongroup_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='box',
            name='receiver_phone',
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Phone number of the receiver', max_length=128, null=True, region=None),
        ),
        migrations.AlterField(
            model_name='box',
            name='box_campaign',
            field=models.ForeignKey(blank=True, help_text='Campaign associated with this gift box', null=True, on_delete=django.db.models.deletion.CASCADE, to='gft.campaign'),
        ),
        migrations.AlterField(
            model_name='box',
            name='days_of_gifting',
            field=models.IntegerField(help_text='Number of days the gift box spans'),
        ),
        migrations.AlterField(
            model_name='box',
            name='is_company_setup',
            field=models.BooleanField(default=False, help_text='Indicates if the gift box is set up by the company'),
        ),
        migrations.AlterField(
            model_name='box',
            name='is_setup',
            field=models.BooleanField(default=False, help_text='Indicates if the gift box setup is complete'),
        ),
        migrations.AlterField(
            model_name='box',
            name='last_opened',
            field=models.DateField(blank=True, help_text='Date when the gift box was last opened', null=True),
        ),
        migrations.AlterField(
            model_name='box',
            name='open_after_a_day',
            field=models.BooleanField(default=False, help_text='Allow opening mini boxes only once a day'),
        ),
        migrations.AlterField(
            model_name='box',
            name='open_date',
            field=models.DateField(default=django.utils.timezone.now, help_text='Date when the gift box can be opened'),
        ),
        migrations.AlterField(
            model_name='box',
            name='qr_code_v',
            field=models.ImageField(blank=True, help_text='QR code image for the gift box', null=True, upload_to='gift_qr_codes/'),
        ),
        migrations.AlterField(
            model_name='box',
            name='receiver_email',
            field=models.CharField(blank=True, help_text='Email of the receiver', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='box',
            name='receiver_name',
            field=models.CharField(blank=True, help_text='Name of the receiver', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='box',
            name='title',
            field=models.CharField(help_text='Title for the gift box package', max_length=150),
        ),
        migrations.AlterField(
            model_name='box',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User who owns the gift box', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='box_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='boxcategory',
            name='category',
            field=models.CharField(blank=True, choices=[('3', '3 days'), ('7', '7 days'), ('14', '14 days'), ('30', '30 days')], help_text='Type of box duration', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='boxcategory',
            name='label',
            field=models.SlugField(blank=True, help_text='Auto-generated slug based on the name', null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='boxcategory',
            name='name',
            field=models.CharField(help_text='Name of the box category', max_length=255),
        ),
        migrations.AlterField(
            model_name='boxcategory',
            name='qty',
            field=models.IntegerField(help_text='Available quantity of boxes for this category'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='company',
            field=models.ForeignKey(help_text='Company organizing the campaign', on_delete=django.db.models.deletion.CASCADE, to='gft.company'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='company_boxes',
            field=models.ForeignKey(blank=True, help_text="Company's gift boxes used in the campaign", null=True, on_delete=django.db.models.deletion.CASCADE, to='gft.companyboxes'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='duration',
            field=models.IntegerField(help_text='Duration of the campaign in days'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='header_image',
            field=models.ImageField(blank=True, help_text='Header image for the campaign', null=True, upload_to='campaigns/headers'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='is_deleted',
            field=models.BooleanField(default=False, help_text='Indicates if the campaign is deleted'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='name',
            field=models.CharField(help_text='Name of the campaign', max_length=255),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='num_boxes',
            field=models.IntegerField(help_text='Number of gift boxes in the campaign'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='open_after_a_day',
            field=models.BooleanField(default=True, help_text='Whether to allow opening mini boxes only once a day'),
        ),
        migrations.AlterField(
            model_name='company',
            name='box_limit',
            field=models.IntegerField(help_text='Maximum number of gift boxes the company can manage'),
        ),
        migrations.AlterField(
            model_name='company',
            name='color_schema',
            field=models.JSONField(blank=True, help_text='Color scheme used by the company', null=True),
        ),
        migrations.AlterField(
            model_name='company',
            name='company_url',
            field=models.CharField(blank=True, help_text="URL of the company's website", max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='company',
            name='header_image',
            field=models.ImageField(blank=True, help_text='Header image for the company', null=True, upload_to='company/headers/'),
        ),
        migrations.AlterField(
            model_name='company',
            name='logo',
            field=models.ImageField(blank=True, help_text='Logo of the company', null=True, upload_to='company/logos/'),
        ),
        migrations.AlterField(
            model_name='company',
            name='name',
            field=models.CharField(blank=True, help_text='Name of the company', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='company',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The owner of the company', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='company',
            name='socials',
            field=models.JSONField(blank=True, help_text='Social media information for the company', null=True),
        ),
        migrations.AlterField(
            model_name='companyapikey',
            name='company',
            field=models.ForeignKey(help_text='Company associated with the API key', on_delete=django.db.models.deletion.CASCADE, to='gft.company', verbose_name='Company'),
        ),
        migrations.AlterField(
            model_name='companyapikey',
            name='groups',
            field=models.ManyToManyField(help_text='Groups associated with the API key', related_name='api_keys', to='gft.permissiongroup', verbose_name='Groups'),
        ),
        migrations.AlterField(
            model_name='companyapikey',
            name='key',
            field=models.CharField(blank=True, help_text='API key value', max_length=255, null=True, unique=True, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='companyapikey',
            name='max_requests',
            field=models.PositiveIntegerField(default=100, help_text='Maximum number of requests allowed for the API key', verbose_name='Maximum Requests'),
        ),
        migrations.AlterField(
            model_name='companyapikey',
            name='num_of_requests_made',
            field=models.PositiveBigIntegerField(default=0, help_text='Number of requests made using the API key', verbose_name='Number of Requests Made'),
        ),
        migrations.AlterField(
            model_name='companyboxes',
            name='box_type',
            field=models.ForeignKey(help_text='Type of gift box', on_delete=django.db.models.deletion.CASCADE, to='gft.boxcategory'),
        ),
        migrations.AlterField(
            model_name='companyboxes',
            name='company',
            field=models.ForeignKey(help_text='The company owning the gift boxes', on_delete=django.db.models.deletion.CASCADE, to='gft.company'),
        ),
        migrations.AlterField(
            model_name='companyboxes',
            name='qty',
            field=models.IntegerField(help_text='Quantity of boxes available'),
        ),
        migrations.AlterField(
            model_name='companyuser',
            name='company',
            field=models.ForeignKey(help_text='The company the user is associated with', on_delete=django.db.models.deletion.CASCADE, to='gft.company'),
        ),
        migrations.AlterField(
            model_name='companyuser',
            name='user',
            field=models.ForeignKey(help_text='The user associated with the company', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='gift',
            name='box_model',
            field=models.ForeignKey(help_text='Gift box that contains this mini box', on_delete=django.db.models.deletion.CASCADE, related_name='gift_box', to='gft.box'),
        ),
        migrations.AlterField(
            model_name='gift',
            name='gift_campaign',
            field=models.ForeignKey(blank=True, help_text='Campaign associated with this mini box', null=True, on_delete=django.db.models.deletion.CASCADE, to='gft.campaign'),
        ),
        migrations.AlterField(
            model_name='gift',
            name='gift_content_type',
            field=models.CharField(default='text', help_text='Type of content in the mini box gift', max_length=255),
        ),
        migrations.AlterField(
            model_name='gift',
            name='gift_description',
            field=models.TextField(help_text='Description of the mini box gift'),
        ),
        migrations.AlterField(
            model_name='gift',
            name='gift_title',
            field=models.CharField(help_text='Title of the mini box gift', max_length=255),
        ),
        migrations.AlterField(
            model_name='gift',
            name='open_date',
            field=models.DateField(help_text='Date when the mini box can be opened'),
        ),
        migrations.AlterField(
            model_name='gift',
            name='opened',
            field=models.BooleanField(default=False, help_text='Indicates if the mini box has been opened'),
        ),
        migrations.AlterField(
            model_name='gift',
            name='qr_code_v',
            field=models.ImageField(blank=True, help_text='QR code image for the mini box', null=True, upload_to='gift_qr_codes/'),
        ),
        migrations.AlterField(
            model_name='gift',
            name='reaction',
            field=models.CharField(blank=True, help_text='Reaction associated with opening the mini box', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='gift',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User who owns the mini box', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gift_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='giftvisit',
            name='gift',
            field=models.ForeignKey(help_text='Mini box being visited', on_delete=django.db.models.deletion.CASCADE, to='gft.gift'),
        ),
        migrations.AlterField(
            model_name='giftvisit',
            name='metadata',
            field=models.JSONField(blank=True, help_text='Additional metadata about the visit', null=True),
        ),
        migrations.AlterField(
            model_name='giftvisit',
            name='time_of_visit',
            field=models.DateTimeField(auto_now_add=True, help_text='Timestamp of the visit'),
        ),
        migrations.AlterField(
            model_name='giftvisit',
            name='visitor',
            field=models.ForeignKey(help_text='User who visited the mini box', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='notification',
            name='box',
            field=models.ForeignKey(help_text='Gift box that the notification is about', on_delete=django.db.models.deletion.CASCADE, to='gft.box'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='gift',
            field=models.ForeignKey(help_text='Mini box that the notification is about', on_delete=django.db.models.deletion.CASCADE, to='gft.gift'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='message',
            field=models.CharField(help_text='Content of the notification message', max_length=255),
        ),
        migrations.AlterField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(help_text='User who receives the notification', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='permissiongroup',
            name='description',
            field=models.TextField(blank=True, help_text='Description of the permission group', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='permissiongroup',
            name='label',
            field=models.CharField(blank=True, help_text='Label for the permission group', max_length=255, null=True, verbose_name='Label'),
        ),
        migrations.AlterField(
            model_name='permissionsmodel',
            name='description',
            field=models.TextField(blank=True, help_text='Description of the permission', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='permissionsmodel',
            name='groups',
            field=models.ManyToManyField(help_text='Groups associated with the permission', related_name='permissions', to='gft.permissiongroup', verbose_name='Groups'),
        ),
        migrations.AlterField(
            model_name='template',
            name='active',
            field=models.BooleanField(default=False, help_text='Is this template active?', verbose_name='Active'),
        ),
        migrations.AlterField(
            model_name='template',
            name='email_body',
            field=models.TextField(blank=True, help_text='Body of the email notification', null=True, verbose_name='Email Body'),
        ),
        migrations.AlterField(
            model_name='template',
            name='notification_type',
            field=models.CharField(choices=[('notify_user_OTP', 'Notify User OTP'), ('verify_OTP', 'Verify OTP'), ('notify_sender_open_gift', 'Notify Sender Open Gift'), ('notify_receiver_to_open_gift', 'Notify Receiver to Open Gift'), ('notify_user_account_activity', 'Notify User Account Activity'), ('server_error', 'Server Error'), ('unauthorized', 'Unauthorized'), ('message', 'Message')], default=('notify_user_OTP', 'Notify User OTP'), help_text='Type of notification template', max_length=255, verbose_name='Notification Type'),
        ),
        migrations.AlterField(
            model_name='template',
            name='sms_body',
            field=models.TextField(blank=True, help_text='Body of the SMS notification', null=True, verbose_name='SMS Body'),
        ),
        migrations.AlterField(
            model_name='template',
            name='subject',
            field=models.CharField(blank=True, help_text='Subject of the email notification', max_length=255, null=True, verbose_name='Subject'),
        ),
    ]
